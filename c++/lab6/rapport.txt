//COUZI RÃ©mi - LAB 6
//Sources:
/*
[StackOverflow](https://stackoverflow.com)
[GeeksforGeeks](https://www.geeksforgeeks.org)
[ChatGPT](https://chat.openai.com)
[GitHub](https://github.com)
*/

//Task 1

#include <stdio.h>

#define PI 3.14159

int main()
{
    float radius, area;
    radius = 12;
    area = PI * radius * radius;
 
    printf("Area = %f", area);
 
    return 0;
}

//Task 2

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>

#define PRINT_RESULT(message) std::cout << message << std::endl

float min(float a, float b) {
    return (a < b) ? a : b;
}

float max(float a, float b) {
    return (a > b) ? a : b;
}

int main(int argc, char *argv[]) {
    //args check
    if (argc != 4) {
        printf("Usage: %s <number1> <number2> <operation>\n", argv[0]);
        return 1;
    }

    //args retrieve
    float num1 = atof(argv[1]);
    float num2 = atof(argv[2]);
    const char *operation = argv[3];

    if (strcmp(operation, "min") == 0) {
        PRINT_RESULT(min(num1,num2));
    } else if (strcmp(operation, "max") == 0) {
        PRINT_RESULT(max(num1,num2));
    } else {
        PRINT_RESULT("Error: Operation not valid");
    }

    return 0;
}

//Task 3

#include <iostream>
#include <string>

bool isValidPizzaCount(int count) {
    return (count >= 1 && count <= 99);
}

int main() {
    // Valid input
    std::cout << "=====Valid input tests=====" << std::endl; 
    std::cout << "1 is valid: " << isValidPizzaCount(1) << std::endl;
    std::cout << "50 is valid: " << isValidPizzaCount(50) << std::endl;
    std::cout << "99 is valid: " << isValidPizzaCount(99) << std::endl;

    // Invalid input
    std::cout << "=====Invalid input tests=====" << std::endl; 
    std::cout << "0 is valid: " << isValidPizzaCount(0) << std::endl;
    std::cout << "100 is valid: " << isValidPizzaCount(100) << std::endl;
    std::cout << "-1 is valid: " << isValidPizzaCount(-1) << std::endl;
    std::cout << "-50 is valid: " << isValidPizzaCount(-50) << std::endl;
    try {
        std::cout << "\"abc\" is valid: " << isValidPizzaCount(std::stoi("abc")) << std::endl;
    } catch(const std::invalid_argument&) {
        std::cout << "not valid atoi()" << std::endl;
    }
    
    // Edge cases
    std::cout << "=====nEdge cases tests=====" << std::endl;
    std::cout << "Close to lower boundary 1: " << isValidPizzaCount(1) << std::endl;
    std::cout << "Close to lower boundary 2: " << isValidPizzaCount(2) << std::endl;
    std::cout << "Close to upper boundary 98: " << isValidPizzaCount(98) << std::endl;
    std::cout << "Close to upper boundary 99: " << isValidPizzaCount(99) << std::endl;

    return 0;
}

//Task 4

#include <iostream>
#include <stdexcept>


int string_to_int(const char* string) {
    int output;
    try {
        output = std::stoi(string);
        if (output < 1 || output > 99) {
            std::cerr << "invalid input" << std::endl;
            throw;
        }
    } catch (const std::invalid_argument&) {
        std::cerr << "invalid input" << std::endl;
        throw;
    }
    return output;
}

int main(int argc, char *argv[]) {
    //args check
    if (argc != 2) {
        printf("Usage: %s <string>\n", argv[0]);
        return 1;
    }

    //args retrieve
    const char *input = argv[1];
    int output = string_to_int(input);
    if (output != -1)
        std::cout << "Number is " << output << std::endl;

    //Valid input
    std::cout << "=====Valid input tests=====" << std::endl; 
    std::cout << "1 is valid: " << string_to_int("1") << std::endl;
    std::cout << "50 is valid: " << string_to_int("50") << std::endl;
    std::cout << "99 is valid: " << string_to_int("99") << std::endl;

    //Invalid input
    std::cout << "=====Invalid input tests=====" << std::endl; 
    std::cout << "0 is: " << string_to_int("0") << std::endl;
    std::cout << "100 is: " << string_to_int("100") << std::endl;
    std::cout << "-1 is: " << string_to_int("-1") << std::endl;
    std::cout << "-50 is: " << string_to_int("-50") << std::endl;
    try {
        std::cout << "\"abc\" is valid: " << string_to_int("abc") << std::endl;
    } catch(const std::invalid_argument&) {
        std::cout << "not valid atoi()" << std::endl;
    }
    
    //Edge cases
    std::cout << "=====nEdge cases tests=====" << std::endl;
    std::cout << "Close to lower boundary 1: " << string_to_int("1") << std::endl;
    std::cout << "Close to lower boundary 2: " << string_to_int("2") << std::endl;
    std::cout << "Close to lower boundary 98: " << string_to_int("98") << std::endl;
    std::cout << "Close to lower boundary 99: " << string_to_int("99") << std::endl;

    return 0;
}